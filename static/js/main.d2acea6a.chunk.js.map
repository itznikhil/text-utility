{"version":3,"sources":["components/Alert.js","components/Navigation.js","components/TextUtility.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","variant","message","Navigation","Navbar","collapseOnSelect","expand","bg","Container","to","className","Toggle","aria-controls","Collapse","id","Nav","TextUtility","React","useState","text","setText","countWords","s","replace","split","filter","str","length","Form","Group","controlId","Label","style","fontSize","fontWeight","Control","as","rows","onChange","e","value","target","Button","onClick","eachWordCapitalizedText","map","word","slice","toUpperCase","toLowerCase","join","showAlert","disabled","filteredString","trim","specialCharactersRemovedString","navigator","clipboard","writeText","About","Accordion","Card","Header","eventKey","Body","App","alert","setAlert","exact","path","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2acea6a.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Alert as AlertDialog} from 'react-bootstrap'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n      <AlertDialog variant={props.variant}>\r\n          {props.message}\r\n      </AlertDialog>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Container, Nav, Navbar } from 'react-bootstrap';\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport default function Navigation() {\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Container>\r\n            <NavLink to=\"/\" className=\"navbar-brand\">Text Utility</NavLink>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink to=\"/\" className=\"nav-link\">Home</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink to=\"/about\" className=\"nav-link\">About</NavLink>\r\n                    </li>            \r\n                </Nav>\r\n            </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n","import React from 'react' \r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nexport default function TextUtility(props) {\r\n    const [text, setText] = React.useState('')\r\n    const handleInputChange = (e) => {\r\n        const value = e.target.value\r\n        setText(value)\r\n    }\r\n    const countWords =(s)=>{\r\n        s = s.replace(/(^\\s*)|(\\s*$)/gi,\"\");//exclude  start and end white-space\r\n        s = s.replace(/[ ]{2,}/gi,\" \");//2 or more space to 1\r\n        s = s.replace(/\\n /,\"\\n\"); // exclude newline with a start spacing\r\n        return s.split(' ').filter(function(str){return str!==\"\";}).length;\r\n        //return s.split(' ').filter(String).length; - this can also be used\r\n    }\r\n    const copyText = () =>{\r\n        navigator.clipboard.writeText(text)\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    const capitalizeEachWord = () =>{\r\n        const words = text.split(' ')\r\n        const capitalizedWords = words.map((word)=>{\r\n            return word.slice(0, 1).toUpperCase() + word.slice(1).toLowerCase()\r\n        })       \r\n        const eachWordCapitalizedText = capitalizedWords.join(\" \") \r\n        setText(eachWordCapitalizedText)\r\n        props.showAlert(\"Capitalized Each Word!\", \"success\");\r\n    }\r\n    const lowerCase = () =>{\r\n        setText(text.toLowerCase())\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }   \r\n    const upperCase = () =>{\r\n        setText(text.toUpperCase())\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    const removeSpecialCharacters = () =>{\r\n        const specialCharactersRemovedString = text.replace(/[^a-zA-Z0-9 ]/g, \"\")\r\n        setText(specialCharactersRemovedString)\r\n        props.showAlert(\"Removed special characters!\", \"success\");\r\n    }\r\n    const removeExtraSpaces = () =>{\r\n        const filteredString = text.replace(/\\s+/g, ' ').trim()\r\n        setText(filteredString)       \r\n        props.showAlert(\"Removed extra spaces!\", \"success\"); \r\n    }\r\n    return (\r\n        <div className=\"container mt-3\">\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label style={{fontSize:36, fontWeight:500}}>Try Text Utility - word counter, character counter, remove extra spaces</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={8} onChange={handleInputChange} value={text} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" className=\"me-3 my-2\" onClick={capitalizeEachWord} disabled={text.length===0}>Capitalize Each Word</Button>\r\n                <Button variant=\"primary\" className=\"me-3 my-2\" onClick={upperCase} disabled={text.length===0}>Convert to Uppercase</Button>\r\n                <Button variant=\"primary\" className=\"me-3 my-2\" onClick={lowerCase} disabled={text.length===0}>Convert to Lowercase</Button>\r\n                <Button variant=\"primary\" className=\"me-3 my-2\" onClick={removeExtraSpaces} disabled={text.length===0}>Remove Extra Spaces</Button>\r\n                <Button variant=\"primary\" className=\"me-3 my-2\" onClick={removeSpecialCharacters} disabled={text.length===0}>Remove Special Characters</Button>\r\n            </Form>\r\n\r\n            <h2 className=\"mt-3\">Your text summary</h2>\r\n            <p>{countWords(text)} words and {text.length} characters</p>\r\n            <p>{countWords(text) / 250} Minutes Read</p> \r\n            <h2 className=\"mt-3\">Preview</h2>\r\n            <p>{text?text:\"Nothing to preview!\"}</p>\r\n            <Button variant=\"primary\" className=\"my-2\" onClick={copyText} disabled={text.length===0}>Copy Text</Button>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Accordion, Card, Button} from \"react-bootstrap\";\r\n\r\nexport default function About() {\r\n  return (\r\n      <div className=\"container mt-3\">\r\n        <h1>About Us</h1> \r\n        <Accordion>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                Analyze your text\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>TextUtility gives you a way to analyze your text quickly and efficiently. Be it word count, character count or</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                Free to use\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <Card.Body>TextUtility is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtility reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\r\n                Browser Compatible\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"2\">\r\n              <Card.Body>This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Alert from \"./components/Alert\"\nimport Navigation from \"./components/Navigation\";\nimport TextUtility from \"./components/TextUtility\";\nimport About from './components/About'\n\nexport default function App() {\n  const [alert, setAlert] = useState({})\n  const showAlert = (message, variant) => {\n    setAlert({ message: message, variant: variant});\n    setTimeout(() => {\n      setAlert({});\n    }, 1500);\n  }\n  return (\n    <Router>\n      <Navigation />\n      <Alert variant={alert.variant} message={alert.message}/>\n      <Switch>\n        <Route exact path=\"/\">\n          <TextUtility showAlert={showAlert}/>\n        </Route>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}